name: Deploy to Production

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'

jobs:
  # Security scan job
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true

      - name: Upload security results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: snyk.sarif

  # Lint and type check
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Type check
        run: npx tsc --noEmit

      - name: Check formatting
        run: npx prettier --check "src/**/*.{ts,tsx,js,jsx}"

  # Test job
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: [security, quality]

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: carwash_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/carwash_test
        run: |
          npx prisma generate
          npx prisma migrate deploy
          npx prisma db seed

      - name: Run tests
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/carwash_test
          NEXTAUTH_SECRET: test-secret-key-for-ci
          NODE_ENV: test
        run: npm test

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        if: always()
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  # Build job
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test]

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate environment variables
        run: node scripts/validate-env.js --generate

      - name: Build application
        env:
          NEXT_PUBLIC_SITE_URL: ${{ secrets.PRODUCTION_URL }}
          NODE_ENV: production
        run: npm run build

      - name: Check build size
        run: |
          echo "Build size report:"
          du -sh out/
          find out -type f -name "*.js" -exec ls -lh {} \; | head -20

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-files
          path: out/
          retention-days: 7

  # Deploy to Netlify
  deploy:
    name: Deploy to Netlify
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-files
          path: out/

      - name: Deploy to Netlify
        uses: netlify/actions/cli@master
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        with:
          args: deploy --prod --dir=out

      - name: Verify deployment
        run: |
          sleep 30
          curl -f ${{ secrets.PRODUCTION_URL }} || exit 1

      - name: Run smoke tests
        run: |
          # Test homepage
          curl -f ${{ secrets.PRODUCTION_URL }} || exit 1

          # Test booking page
          curl -f ${{ secrets.PRODUCTION_URL }}/booking || exit 1

          # Test API health
          curl -f ${{ secrets.PRODUCTION_URL }}/api/health || exit 1

  # Lighthouse performance check
  lighthouse:
    name: Performance Check
    runs-on: ubuntu-latest
    needs: [deploy]
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v3

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v9
        with:
          urls: |
            ${{ secrets.PRODUCTION_URL }}
            ${{ secrets.PRODUCTION_URL }}/booking
            ${{ secrets.PRODUCTION_URL }}/services
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Check performance scores
        run: |
          echo "Performance scores should be above 90"

  # Security headers check
  security-headers:
    name: Security Headers Check
    runs-on: ubuntu-latest
    needs: [deploy]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Check security headers
        run: |
          response=$(curl -sI ${{ secrets.PRODUCTION_URL }})

          # Check for required headers
          echo "$response" | grep -q "Strict-Transport-Security" || exit 1
          echo "$response" | grep -q "X-Content-Type-Options" || exit 1
          echo "$response" | grep -q "X-Frame-Options" || exit 1
          echo "$response" | grep -q "X-XSS-Protection" || exit 1
          echo "$response" | grep -q "Referrer-Policy" || exit 1

          echo "âœ… All security headers present"

  # Database backup
  backup:
    name: Database Backup
    runs-on: ubuntu-latest
    needs: [deploy]
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Run database backup
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          BACKUP_ENCRYPTION_KEY: ${{ secrets.BACKUP_ENCRYPTION_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          S3_BACKUP_BUCKET: ${{ secrets.S3_BACKUP_BUCKET }}
        run: |
          node -e "
            const { createBackup } = require('./src/lib/security/db-backup');
            createBackup().then(result => {
              console.log('Backup completed:', result.backupId);
            }).catch(console.error);
          "

  # Notify deployment status
  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy, lighthouse, security-headers]
    if: always()

    steps:
      - name: Send success notification
        if: success()
        env:
          WEBHOOK_URL: ${{ secrets.MONITORING_WEBHOOK_URL }}
        run: |
          curl -X POST $WEBHOOK_URL \
            -H "Content-Type: application/json" \
            -d '{
              "type": "deployment",
              "status": "success",
              "environment": "production",
              "commit": "${{ github.sha }}",
              "author": "${{ github.actor }}",
              "message": "${{ github.event.head_commit.message }}"
            }'

      - name: Send failure notification
        if: failure()
        env:
          WEBHOOK_URL: ${{ secrets.MONITORING_WEBHOOK_URL }}
        run: |
          curl -X POST $WEBHOOK_URL \
            -H "Content-Type: application/json" \
            -d '{
              "type": "deployment",
              "status": "failed",
              "environment": "production",
              "commit": "${{ github.sha }}",
              "author": "${{ github.actor }}",
              "message": "Deployment failed - check GitHub Actions"
            }'