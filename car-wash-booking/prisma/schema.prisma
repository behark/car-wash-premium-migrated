generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x", "rhel-openssl-3.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Service {
  id              Int       @id @default(autoincrement())
  titleFi         String
  titleEn         String
  descriptionFi   String
  descriptionEn   String
  priceCents      Int
  durationMinutes Int
  capacity        Int       @default(1)
  image           String?
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  bookings        Booking[]
}

model Booking {
  id                Int                @id @default(autoincrement())
  serviceId         Int
  vehicleType       String
  date              DateTime
  startTime         String
  endTime           String
  duration          Int
  priceCents        Int
  status            BookingStatus      @default(PENDING)
  customerName      String
  customerEmail     String
  customerPhone     String
  notes             String?
  paymentStatus     PaymentStatus      @default(PENDING)
  paymentIntentId   String?
  stripeSessionId   String?
  confirmationCode  String?            @unique
  adminNotes        String?
  cancelledAt       DateTime?
  completedAt       DateTime?
  notificationsSent Int                @default(0)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  timeSlotId        Int?
  licensePlate      String?
  // TastyIgniter-inspired enhancements
  assignedStaffId   Int?
  assignedBayId     Int?
  assignedAt        DateTime?
  assignedBy        String?
  cancellationReason String?
  guestCount        Int                @default(1)
  statusHistory     Json?              // Array of status change records
  // Relations
  service           Service            @relation(fields: [serviceId], references: [id])
  timeSlot          TimeSlot?          @relation(fields: [timeSlotId], references: [id])
  assignedStaff     Staff?             @relation(fields: [assignedStaffId], references: [id])
  assignedBay       WashBay?           @relation(fields: [assignedBayId], references: [id])
  statusHistoryLog  BookingStatusHistory[]

  @@index([date, startTime])
  @@index([customerEmail])
  @@index([confirmationCode])
  @@index([assignedStaffId])
  @@index([assignedBayId])
  @@index([status])
}

model Testimonial {
  id        Int      @id @default(autoincrement())
  name      String
  contentFi String
  contentEn String
  rating    Int
  approved  Boolean  @default(false)
  createdAt DateTime @default(now())
}

model User {
  id           Int      @id @default(autoincrement())
  name         String?
  email        String   @unique
  role         String
  passwordHash String
  createdAt    DateTime @default(now())
}

model Setting {
  id    Int    @id @default(autoincrement())
  key   String @unique
  value String
}

model TimeSlot {
  id              Int       @id @default(autoincrement())
  date            DateTime
  startTime       String
  endTime         String
  isAvailable     Boolean   @default(true)
  maxCapacity     Int       @default(1)
  currentBookings Int       @default(0)
  isHoliday       Boolean   @default(false)
  notes           String?
  createdAt       DateTime  @default(now())
  bookings        Booking[]

  @@unique([date, startTime])
  @@index([date])
}

model BusinessHours {
  id         Int     @id @default(autoincrement())
  dayOfWeek  Int     @unique
  startTime  String
  endTime    String
  isOpen     Boolean @default(true)
  breakStart String?
  breakEnd   String?
}

model Holiday {
  id          Int      @id @default(autoincrement())
  date        DateTime @unique
  name        String
  description String?
}

model EmailNotification {
  id             Int       @id @default(autoincrement())
  bookingId      Int
  type           EmailType
  recipientEmail String
  subject        String
  sentAt         DateTime  @default(now())
  status         String    @default("SENT")
  errorMessage   String?

  @@index([bookingId])
}

model PushSubscription {
  id            Int                @id @default(autoincrement())
  endpoint      String             @unique
  p256dh        String
  auth          String
  userAgent     String?
  userId        Int?
  customerEmail String?
  isActive      Boolean            @default(true)
  lastUsed      DateTime           @default(now())
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  notifications PushNotification[]

  @@index([customerEmail])
  @@index([isActive])
}

model PushNotification {
  id             Int                @id @default(autoincrement())
  subscriptionId Int
  bookingId      Int?
  type           NotificationType
  title          String
  body           String
  icon           String?
  badge          String?
  image          String?
  data           Json?
  actions        Json?
  scheduledFor   DateTime?
  sentAt         DateTime?
  status         NotificationStatus @default(PENDING)
  attempts       Int                @default(0)
  maxAttempts    Int                @default(3)
  errorMessage   String?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  subscription   PushSubscription   @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([subscriptionId])
  @@index([bookingId])
  @@index([status])
  @@index([scheduledFor])
}

model NotificationTemplate {
  id        Int              @id @default(autoincrement())
  type      NotificationType @unique
  titleFi   String
  titleEn   String
  bodyFi    String
  bodyEn    String
  icon      String?
  badge     String?
  actions   Json?
  isActive  Boolean          @default(true)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model NotificationPreference {
  id                   Int      @id @default(autoincrement())
  customerEmail        String   @unique
  bookingReminders     Boolean  @default(true)
  paymentConfirmations Boolean  @default(true)
  promotionalOffers    Boolean  @default(false)
  statusUpdates        Boolean  @default(true)
  marketingEmails      Boolean  @default(false)
  smsNotifications     Boolean  @default(false)
  pushNotifications    Boolean  @default(true)
  reminderHoursBefore  Int      @default(24)
  updatedAt            DateTime @updatedAt

  @@index([customerEmail])
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum PaymentStatus {
  PENDING
  PROCESSING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum EmailType {
  BOOKING_CONFIRMATION
  PAYMENT_CONFIRMATION
  BOOKING_REMINDER
  BOOKING_CANCELLED
  ADMIN_NOTIFICATION
}

enum NotificationType {
  BOOKING_CONFIRMATION
  BOOKING_REMINDER
  PAYMENT_CONFIRMATION
  BOOKING_CANCELLED
  BOOKING_COMPLETED
  PROMOTIONAL_OFFER
  STATUS_UPDATE
  ADMIN_NOTIFICATION
  MAINTENANCE_ALERT
  CUSTOM
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
  CANCELLED
  EXPIRED
}

// TastyIgniter-inspired models for enhanced booking management

model WashBay {
  id             Int       @id @default(autoincrement())
  name           String
  bayNumber      Int       @unique
  minCapacity    Int       @default(1) // Minimum vehicle size (1=small, 2=medium, 3=large)
  maxCapacity    Int       @default(3) // Maximum vehicle size
  shape          String    @default("rectangular") // For future floor plan visualization
  isEnabled      Boolean   @default(true)
  location       String?   // Physical location description
  notes          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  bookings       Booking[]

  @@index([isEnabled])
}

model Staff {
  id          Int       @id @default(autoincrement())
  name        String
  email       String    @unique
  phone       String?
  role        StaffRole @default(OPERATOR)
  isActive    Boolean   @default(true)
  specialties String?   // JSON array of specialties
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  bookings    Booking[]

  @@index([isActive])
  @@index([role])
}

model BookingStatusHistory {
  id               Int           @id @default(autoincrement())
  bookingId        Int
  fromStatus       BookingStatus?
  toStatus         BookingStatus
  changedBy        String        // "system", "customer", "admin", or user email
  changedByType    String        @default("system") // "system", "customer", "admin", "staff"
  reason           String?
  notes            String?
  metadata         Json?         // Additional contextual data
  createdAt        DateTime      @default(now())
  booking          Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@index([bookingId])
  @@index([createdAt])
}

model BookingConfiguration {
  id                      Int      @id @default(autoincrement())
  key                     String   @unique
  // Time slot settings
  intervalMinutes         Int      @default(30)        // Time slot interval
  leadTimeHours           Int      @default(2)         // Minimum hours in advance to book
  maxAdvanceDays          Int      @default(30)        // Maximum days in advance to book
  // Cancellation settings
  cancellationDeadlineHours Int    @default(24)       // Hours before booking to allow cancellation
  allowCustomerCancellation Boolean @default(true)
  // Capacity settings
  defaultBayCapacity      Int      @default(1)
  enableAutoBayAssignment Boolean  @default(true)
  // Workflow settings
  autoConfirmBookings     Boolean  @default(false)
  requirePaymentUpfront   Boolean  @default(true)
  // Notification settings
  sendReminderHours       Int      @default(24)
  enableSmsNotifications  Boolean  @default(true)
  enablePushNotifications Boolean  @default(true)
  // Values (stored as JSON for flexibility)
  value                   String?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  @@index([key])
}

model AutomationRule {
  id          Int                @id @default(autoincrement())
  name        String
  description String?
  eventType   AutomationEvent
  conditions  Json?              // Array of condition objects
  actions     Json               // Array of action objects (email, sms, push, webhook)
  isActive    Boolean            @default(true)
  priority    Int                @default(0)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  executions  AutomationExecution[]

  @@index([eventType])
  @@index([isActive])
}

model AutomationExecution {
  id             Int            @id @default(autoincrement())
  ruleId         Int
  bookingId      Int?
  status         String         // "success", "failed", "skipped"
  result         Json?          // Execution result data
  errorMessage   String?
  executedAt     DateTime       @default(now())
  rule           AutomationRule @relation(fields: [ruleId], references: [id], onDelete: Cascade)

  @@index([ruleId])
  @@index([bookingId])
  @@index([executedAt])
}

enum StaffRole {
  OPERATOR
  SUPERVISOR
  MANAGER
  ADMIN
}

enum AutomationEvent {
  BOOKING_CREATED
  BOOKING_CONFIRMED
  BOOKING_STATUS_CHANGED
  BOOKING_ASSIGNED
  BOOKING_CANCELLED
  BOOKING_COMPLETED
  BOOKING_NO_SHOW
  PAYMENT_RECEIVED
  REMINDER_24H
  REMINDER_2H
}
